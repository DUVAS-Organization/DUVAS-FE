import axios from 'axios';

const API_BASE_URL = 'https://localhost:8000/api/UpdateRole';

const UpRoleService = {
    // T·∫°o gi·∫•y ph√©p ch·ªß nh√† (s·ª≠ d·ª•ng DTO)
    createLandlordLicense: async (data, token) => {
        try {
            const response = await axios.post(`${API_BASE_URL}/Create-LandlordLicence`, data, {
                headers: { Authorization: `Bearer ${token}` },
            });
            console.log("üìå API Response (Create Landlord License):", response.data);
            return response.data;
        } catch (error) {
            console.error("‚ùå Error creating landlord license:", error);
            throw error;
        }
    },

    // T·∫°o gi·∫•y ph√©p d·ªãch v·ª• (s·ª≠ d·ª•ng DTO)
    createServiceLicense: async (data, token) => {
        try {
            const response = await axios.post(`${API_BASE_URL}/Create-ServiceLicence`, data, {
                headers: { Authorization: `Bearer ${token}` },
            });
            console.log("üìå API Response (Create Service License):", response.data);
            return response.data;
        } catch (error) {
            console.error("‚ùå Error creating service license:", error);
            throw error;
        }
    },

    // C·∫≠p nh·∫≠t role th√†nh ch·ªß nh√†
    updateRoleToLandlord: async (userId, token) => {
        try {
            await axios.put(`${API_BASE_URL}/${userId}/UpdateRoleLandlord`, null, {
                headers: { Authorization: `Bearer ${token}` },
            });
            console.log("‚úÖ Role updated to Landlord");
        } catch (error) {
            console.error("‚ùå Error updating role to Landlord:", error);
            throw error;
        }
    },

    // C·∫≠p nh·∫≠t role th√†nh d·ªãch v·ª•
    updateRoleToService: async (userId, token) => {
        try {
            await axios.put(`${API_BASE_URL}/${userId}/UpdateRoleService`, null, {
                headers: { Authorization: `Bearer ${token}` },
            });
            console.log("‚úÖ Role updated to Service Provider");
        } catch (error) {
            console.error("‚ùå Error updating role to Service Provider:", error);
            throw error;
        }
    },

    // L·∫•y danh s√°ch gi·∫•y ph√©p ch·ªß nh√†
    getLandlordLicenses: async (token) => {
        try {
            const response = await axios.get(`${API_BASE_URL}`, {
                headers: { Authorization: `Bearer ${token}` },
            });
            console.log("üìå Fetched Landlord Licenses:", response.data);
            return response.data;
        } catch (error) {
            console.error("‚ùå Error fetching landlord licenses:", error);
            throw error;
        }
    },

    // L·∫•y chi ti·∫øt gi·∫•y ph√©p ch·ªß nh√† theo ID
    getLandlordLicenseById: async (id, token) => {
        try {
            const response = await axios.get(`${API_BASE_URL}/${id}`, {
                headers: { Authorization: `Bearer ${token}` },
            });
            console.log("üìå Fetched Landlord License:", response.data);
            return response.data;
        } catch (error) {
            console.error("‚ùå Error fetching landlord license details:", error);
            throw error;
        }
    },

    // C·∫≠p nh·∫≠t th√¥ng tin gi·∫•y ph√©p ch·ªß nh√† (kh√°c v·ªõi c·∫≠p nh·∫≠t role)
    updateLandlordLicense: async (id, data, token) => {
        try {
            await axios.put(`${API_BASE_URL}/${id}`, data, {
                headers: { Authorization: `Bearer ${token}` },
            });
            console.log("‚úÖ Landlord License updated");
        } catch (error) {
            console.error("‚ùå Error updating landlord license:", error);
            throw error;
        }
    },

    // X√≥a gi·∫•y ph√©p ch·ªß nh√†
    deleteLandlordLicense: async (id, token) => {
        try {
            await axios.delete(`${API_BASE_URL}/${id}`, {
                headers: { Authorization: `Bearer ${token}` },
            });
            console.log("‚úÖ Landlord License Deleted");
        } catch (error) {
            console.error("‚ùå Error deleting landlord license:", error);
            throw error;
        }
    },

    // ---------------------------
    // C√°c API li√™n quan ƒë·∫øn Service License
    // L·∫•y danh s√°ch gi·∫•y ph√©p d·ªãch v·ª•
    getServiceLicenses: async (token) => {
        try {
            const response = await axios.get(`${API_BASE_URL}/service`, {
                headers: { Authorization: `Bearer ${token}` },
            });
            console.log("üìå Fetched Service Licenses:", response.data);
            return response.data;
        } catch (error) {
            console.error("‚ùå Error fetching service licenses:", error);
            throw error;
        }
    },

    // L·∫•y chi ti·∫øt gi·∫•y ph√©p d·ªãch v·ª• theo ID
    getServiceLicenseById: async (id, token) => {
        try {
            const response = await axios.get(`${API_BASE_URL}/service/${id}`, {
                headers: { Authorization: `Bearer ${token}` },
            });
            console.log("üìå Fetched Service License:", response.data);
            return response.data;
        } catch (error) {
            console.error("‚ùå Error fetching service license details:", error);
            throw error;
        }
    },

    // T·∫°o gi·∫•y ph√©p d·ªãch v·ª• (s·ª≠ d·ª•ng model, n·∫øu c·∫ßn t√°ch ri√™ng DTO v√† model)
    createServiceLicenseModel: async (data, token) => {
        try {
            const response = await axios.post(`${API_BASE_URL}/service`, data, {
                headers: { Authorization: `Bearer ${token}` },
            });
            console.log("üìå API Response (Create Service License Model):", response.data);
            return response.data;
        } catch (error) {
            console.error("‚ùå Error creating service license model:", error);
            throw error;
        }
    },

    // C·∫≠p nh·∫≠t th√¥ng tin gi·∫•y ph√©p d·ªãch v·ª•
    updateServiceLicense: async (id, data, token) => {
        try {
            await axios.put(`${API_BASE_URL}/service/${id}`, data, {
                headers: { Authorization: `Bearer ${token}` },
            });
            console.log("‚úÖ Service License updated");
        } catch (error) {
            console.error("‚ùå Error updating service license:", error);
            throw error;
        }
    },

    // X√≥a gi·∫•y ph√©p d·ªãch v·ª•
    deleteServiceLicense: async (id, token) => {
        try {
            await axios.delete(`${API_BASE_URL}/service/${id}`, {
                headers: { Authorization: `Bearer ${token}` },
            });
            console.log("‚úÖ Service License Deleted");
        } catch (error) {
            console.error("‚ùå Error deleting service license:", error);
            throw error;
        }
    },
};

export default UpRoleService;
