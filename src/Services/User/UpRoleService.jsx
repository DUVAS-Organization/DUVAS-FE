import axios from 'axios';

const API_BASE_URL = 'https://apiduvas1.runasp.net/api/UpdateRole';

/**
 * Service x·ª≠ l√Ω c√°c y√™u c·∫ßu li√™n quan ƒë·∫øn c·∫≠p nh·∫≠t vai tr√≤, gi·∫•y ph√©p ch·ªß nh√† v√† d·ªãch v·ª•
 */
const UpRoleService = {
    // ----- API gi·∫•y ph√©p ch·ªß nh√† (Landlord License) -----

    /**
     * T·∫°o gi·∫•y ph√©p ch·ªß nh√† m·ªõi
     * @param {Object} data - D·ªØ li·ªáu gi·∫•y ph√©p (LandlordLicenseDTO)
     * @param {string} token - Token x√°c th·ª±c
     * @returns {Object} D·ªØ li·ªáu gi·∫•y ph√©p ƒë√£ t·∫°o
     */
    createLandlordLicense: async (data, token) => {
        try {
            const response = await axios.post(`${API_BASE_URL}/Create-LandlordLicence`, data, {
                headers: { Authorization: `Bearer ${token}` },
            });
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói khi t·∫°o gi·∫•y ph√©p ch·ªß nh√†:', error.response?.data || error.message);
            throw error;
        }
    },

    /**
     * L·∫•y danh s√°ch t·∫•t c·∫£ gi·∫•y ph√©p ch·ªß nh√†
     * @param {string} token - Token x√°c th·ª±c
     * @returns {Array} Danh s√°ch gi·∫•y ph√©p
     */
    getLandlordLicenses: async (token) => {
        try {
            const response = await axios.get(`${API_BASE_URL}`, {
                headers: { Authorization: `Bearer ${token}` },
            });
            // console.log('üìå L·∫•y danh s√°ch gi·∫•y ph√©p ch·ªß nh√†:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y danh s√°ch gi·∫•y ph√©p ch·ªß nh√†:', error.response?.data || error.message);
            throw error;
        }
    },

    /**
     * L·∫•y th√¥ng tin gi·∫•y ph√©p ch·ªß nh√† theo ID
     * @param {number} id - ID gi·∫•y ph√©p
     * @param {string} token - Token x√°c th·ª±c
     * @returns {Object} Th√¥ng tin gi·∫•y ph√©p
     */
    getLandlordLicenseById: async (landlordLicenseId, token) => {
        try {
            const response = await axios.get(`${API_BASE_URL}/${landlordLicenseId}`, {
                headers: { Authorization: `Bearer ${token}` },
            });
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y th√¥ng tin gi·∫•y ph√©p ch·ªß nh√†:', error.response?.data || error.message);
            throw error;
        }
    },

    /**
     * C·∫≠p nh·∫≠t th√¥ng tin gi·∫•y ph√©p ch·ªß nh√†
     * @param {number} id - ID gi·∫•y ph√©p
     * @param {Object} data - D·ªØ li·ªáu gi·∫•y ph√©p c·∫ßn c·∫≠p nh·∫≠t
     * @param {string} token - Token x√°c th·ª±c
     */
    updateLandlordLicense: async (id, data, token) => {
        try {
            await axios.put(`${API_BASE_URL}/${id}`, data, {
                headers: { Authorization: `Bearer ${token}` },
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t gi·∫•y ph√©p ch·ªß nh√†:', error.response?.data || error.message);
            throw error;
        }
    },

    /**
     * X√≥a gi·∫•y ph√©p ch·ªß nh√†
     * @param {number} id - ID gi·∫•y ph√©p
     * @param {string} token - Token x√°c th·ª±c
     */
    deleteLandlordLicense: async (id, token) => {
        try {
            await axios.delete(`${API_BASE_URL}/${id}`, {
                headers: { Authorization: `Bearer ${token}` },
            });
            console.log('‚úÖ X√≥a gi·∫•y ph√©p ch·ªß nh√† th√†nh c√¥ng');
        } catch (error) {
            console.error('‚ùå L·ªói khi x√≥a gi·∫•y ph√©p ch·ªß nh√†:', error.response?.data || error.message);
            throw error;
        }
    },

    // ----- API gi·∫•y ph√©p d·ªãch v·ª• (Service License) -----

    /**
     * T·∫°o gi·∫•y ph√©p d·ªãch v·ª• m·ªõi
     * @param {Object} data - D·ªØ li·ªáu gi·∫•y ph√©p (ServiceLicenseDTO)
     * @param {string} token - Token x√°c th·ª±c
     * @returns {Object} D·ªØ li·ªáu gi·∫•y ph√©p ƒë√£ t·∫°o
     */
    createServiceLicense: async (data, token) => {
        try {
            const response = await axios.post(`${API_BASE_URL}/Create-ServiceLicence`, data, {
                headers: { Authorization: `Bearer ${token}` },
            });
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói khi t·∫°o gi·∫•y ph√©p d·ªãch v·ª•:', error.response?.data || error.message);
            throw error;
        }
    },

    /**
     * L·∫•y danh s√°ch t·∫•t c·∫£ gi·∫•y ph√©p d·ªãch v·ª•
     * @param {string} token - Token x√°c th·ª±c
     * @returns {Array} Danh s√°ch gi·∫•y ph√©p
     */
    getServiceLicenses: async (token) => {
        try {
            const response = await axios.get(`${API_BASE_URL}/service`, {
                headers: { Authorization: `Bearer ${token}` },
            });
            // console.log('üìå L·∫•y danh s√°ch gi·∫•y ph√©p d·ªãch v·ª•:', response.data);
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y danh s√°ch gi·∫•y ph√©p d·ªãch v·ª•:', error.response?.data || error.message);
            throw error;
        }
    },

    /**
     * L·∫•y th√¥ng tin gi·∫•y ph√©p d·ªãch v·ª• theo ID
     * @param {number} id - ID gi·∫•y ph√©p
     * @param {string} token - Token x√°c th·ª±c
     * @returns {Object} Th√¥ng tin gi·∫•y ph√©p
     */
    getServiceLicenseById: async (id, token) => {
        try {
            const response = await axios.get(`${API_BASE_URL}/service/${id}`, {
                headers: { Authorization: `Bearer ${token}` },
            });
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y th√¥ng tin gi·∫•y ph√©p d·ªãch v·ª•:', error.response?.data || error.message);
            throw error;
        }
    },


    /**
     * C·∫≠p nh·∫≠t th√¥ng tin gi·∫•y ph√©p d·ªãch v·ª•
     * @param {number} id - ID gi·∫•y ph√©p
     * @param {Object} data - D·ªØ li·ªáu gi·∫•y ph√©p c·∫ßn c·∫≠p nh·∫≠t
     * @param {string} token - Token x√°c th·ª±c
     */
    updateServiceLicense: async (id, data, token) => {
        try {
            await axios.put(`${API_BASE_URL}/service/${id}`, data, {
                headers: { Authorization: `Bearer ${token}` },
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t gi·∫•y ph√©p d·ªãch v·ª•:', error.response?.data || error.message);
            throw error;
        }
    },

    /**
     * X√≥a gi·∫•y ph√©p d·ªãch v·ª•
     * @param {number} id - ID gi·∫•y ph√©p
     * @param {string} token - Token x√°c th·ª±c
     */
    deleteServiceLicense: async (id, token) => {
        try {
            await axios.delete(`${API_BASE_URL}/service/${id}`, {
                headers: { Authorization: `Bearer ${token}` },
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi x√≥a gi·∫•y ph√©p d·ªãch v·ª•:', error.response?.data || error.message);
            throw error;
        }
    },

    // ----- API c·∫≠p nh·∫≠t vai tr√≤ -----

    /**
     * C·∫≠p nh·∫≠t vai tr√≤ th√†nh ch·ªß nh√† (RoleLandlord = 2)
     * @param {number} userId - ID ng∆∞·ªùi d√πng
     * @param {string} token - Token x√°c th·ª±c
     */
    updateRoleToLandlord: async (userId, token) => {
        try {
            const body = { UserId: userId }; // BE y√™u c·∫ßu object User v·ªõi UserId
            await axios.put(`${API_BASE_URL}/${userId}/UpdateRoleLandlord`, body, {
                headers: { Authorization: `Bearer ${token}` },
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t vai tr√≤ ch·ªß nh√†:', error.response?.data || error.message);
            throw error;
        }
    },

    /**
     * C·∫≠p nh·∫≠t vai tr√≤ th√†nh nh√† cung c·∫•p d·ªãch v·ª• (RoleLandlord = 2)
     * @param {number} userId - ID ng∆∞·ªùi d√πng
     * @param {string} token - Token x√°c th·ª±c
     */
    updateRoleToService: async (userId, token) => {
        try {
            const body = { UserId: userId }; // BE y√™u c·∫ßu object User v·ªõi UserId
            await axios.put(`${API_BASE_URL}/${userId}/UpdateRoleService`, body, {
                headers: { Authorization: `Bearer ${token}` },
            });
        } catch (error) {
            console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t vai tr√≤ d·ªãch v·ª•:', error.response?.data || error.message);
            throw error;
        }
    },
};

export default UpRoleService;